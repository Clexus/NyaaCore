plugins {
    id 'java-library'
    id 'maven-publish'
}

ext.pluginNameUpper = "NyaaCore"
ext.pluginNameLower = ext.pluginNameUpper.toLowerCase()

ext.majorVersion = 9
ext.minorVersion = 0
ext.minecraftVersion = "1.18"
sourceCompatibility = 17
targetCompatibility = 17

// Supplied by Jenkins
ext.buildNumber = System.env.BUILD_NUMBER == null ? "x"                : "$System.env.BUILD_NUMBER"
ext.mavenDirectory = System.env.MAVEN_DIR == null ? "$projectDir/repo" : "$System.env.MAVEN_DIR"
ext.jdDirectory = System.env.JAVADOCS_DIR == null ? null               : "$System.env.JAVADOCS_DIR"

String DownloadFile(String manual_override, String filename, String url) {
    String ret = "";
    if (manual_override != null) {
        ret = manual_override;
        if (new File(ret).exists()) {
            logger.warn("Manually selected: ${ret}")
            return ret;
        } else {
            throw new GradleException("File not found: ${ret}")
        }
    } 

    // ci environment
    if (new File("${mavenDirectory}/${filename}").exists()) {
        return "${mavenDirectory}/${filename}"
    }

    // check local dir (dev environment)
    ret = "${projectDir}/../nms_binaries/${filename}"
    if (!(new File(ret).exists())) {
        // nms not found, download from nyaaci
        def f = new File(ret)
        println "Downloading ${filename}"
        f.getParentFile().mkdirs()
        new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    println ("Found file: ${filename} => ${ret}")
    return ret
}

String deobfedJar = DownloadFile(System.env.NMS_JAR,
                                    "spigot-${minecraftVersion}-latest-deobfed.jar",
                                    "https://ci.nyaacat.com/maven/spigot-${minecraftVersion}-latest-deobfed.jar")
String deobfMapping = DownloadFile(System.env.NMS_DEOBF_MAPPING,
                                    "spigot-${minecraftVersion}-latest-deobf-mapping.csrg",
                                    "https://ci.nyaacat.com/maven/spigot-${minecraftVersion}-latest-deobf-mapping.csrg")
String specialSourceJar = DownloadFile(System.env.SPECIAL_SOURCE_JAR,
                                    "specialsource-shaded.jar",
                                    "https://search.maven.org/remotecontent?filepath=net/md-5/SpecialSource/1.11.0/SpecialSource-1.11.0-shaded.jar")

// Version used for distribution. Different from maven repo
group = "cat.nyaa"
archivesBaseName = "${pluginNameUpper}-mc$minecraftVersion"
version = "$majorVersion.$minorVersion.$buildNumber".toString()

// extra compile warnings
compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { name 'Bugjang';     url 'https://libraries.minecraft.net' }
    maven { name 'Spigot';      url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name 'Sonatype';    url 'https://oss.sonatype.org/content/groups/public' }
    maven { name 'vault-repo';  url 'https://nexus.hc.to/content/repositories/pub_releases' }
    maven { name 'EssentialsX'; url 'https://ci.ender.zone/plugin/repository/everything' }
    maven { name 'NyaaCat';     url 'https://ci.nyaacat.com/maven/' }
}

dependencies {
    // spigot dependencies
    compileOnly "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"
    compileOnly files(deobfedJar)
    compileOnly 'com.mojang:brigadier:1.0.18'
    compileOnly 'com.mojang:datafixerupper:4.0.26'

    // other plugins
    compileOnly('net.milkbowl.vault:VaultAPI:1.7') { transitive = false }  // soft dep
    compileOnly('net.ess3:EssentialsX:2.18.0') { transitive = false }      // soft dep

    compileOnly 'org.jetbrains:annotations:22.0.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation files(deobfedJar)
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.17:1.7.0'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.xerial:sqlite-jdbc:3.36.0.1'
    testImplementation 'ch.vorburger.mariaDB4j:mariaDB4j:2.4.0'
}



// artifacts
task reobfedJar(dependsOn: [build]) {
    doLast {
        exec {
            String inJar = jar.archiveFile.get().asFile.path;
            String outJar = new File(jar.getArchiveFile().get().asFile.getParent(), jar.getArchiveBaseName().get() + "-" + jar.archiveVersion.get() + "-reobfed.jar").path
            commandLine(
                    "java","-jar",specialSourceJar,
                    "--live",
                    "-i", inJar,
                    "-o", outJar,
                    "-m", deobfMapping,
                    "--reverse"
            )
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

processResources { // modify version string
    filesMatching("**/plugin.yml") {
        expand 'version': project.version
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group      project.group
            artifactId pluginNameLower
            version    "$majorVersion.$minorVersion-SNAPSHOT"

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url mavenDirectory
        }
    }
}

javadoc {
    // javadoc output folder
    if (project.jdDirectory != null) destinationDir = file("${jdDirectory}/${pluginNameLower}-${version}")

    (options as StandardJavadocDocletOptions).with {
        links 'https://docs.oracle.com/en/java/javase/16/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://google.github.io/guava/releases/21.0/api/docs/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'

        locale 'en_US'
        encoding 'UTF-8'
        docEncoding 'UTF-8'
        addBooleanOption('keywords', true)
        addStringOption('Xdoclint:none', '-quiet')

        options.addBooleanOption('html5', true)

        windowTitle = "${pluginNameUpper} Javadoc"
        docTitle = "${pluginNameUpper} (mc$minecraftVersion-${project.version})"
    }
}
